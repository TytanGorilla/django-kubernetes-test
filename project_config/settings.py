"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 3.2.25.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
import json # Added for JSON parsing of React's asset-manifest.json
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# ------------------------------------------------------------------------------------
# SECURITY
# ------------------------------------------------------------------------------------
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "fallback_secret")

# Fetch DJANGO_DEBUG from the environment (ConfigMap), defaulting to False if not found
DEBUG = os.environ.get("DJANGO_DEBUG", "False").lower() in ("true", "1")

# Fetch DJANGO_ALLOWED_HOSTS from the environment (ConfigMap), defaulting to a safe fallback
ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")
# ------------------------------------------------------------------------------------

# ------------------------------------------------------------------------------------
# Application definition
# ------------------------------------------------------------------------------------
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework', # Added for Django REST Framework (DRF)
    'rest_framework_simplejwt', # Added for Django REST Framework Simple JWT
    'corsheaders',
    'apps.scheduler', # Updated the path to include the apps folder
    # Add your custom apps here
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",  # Must come after CorsMiddleware
]

ROOT_URLCONF = 'project_config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'project_config/templates',  # Global templates
            BASE_DIR / "apps/scheduler/templates",  # Scheduler templates
            BASE_DIR / "frontend/build",  # ✅ React's index.html
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project_config.wsgi.application'


# ------------------------------------------------------------------------------------
# Database Configuration
# ------------------------------------------------------------------------------------
# You can either:
# 1) Use individual environment variables (POSTGRES_DB, POSTGRES_USER, etc.), or
# 2) Use a full DATABASE_URL environment variable (e.g., "postgresql://user:pass@db:5432/dbname").

# EXAMPLE 1: Using individual environment variables
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv("POSTGRES_DB", "postgres"),
        'USER': os.getenv("POSTGRES_USER", "postgres"),
        'PASSWORD': os.getenv("POSTGRES_PASSWORD", ""),
        'HOST': os.getenv("POSTGRES_HOST", "db"),
        'PORT': os.getenv("POSTGRES_PORT", "5432"),
    }
}

# EXAMPLE 2: Using DATABASE_URL (comment out EXAMPLE 1 if you choose this approach)
# import dj_database_url
# DATABASES = {
#     'default': dj_database_url.config(default="postgresql://postgres:@db:5432/postgres")
# }

# ------------------------------------------------------------------------------------
# Password validation
# ------------------------------------------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# ------------------------------------------------------------------------------------
# Internationalization
# ------------------------------------------------------------------------------------
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# ------------------------------------------------------------------------------------
# Static files (CSS, JavaScript, Images)
# ------------------------------------------------------------------------------------
# Specify the URL to access the static files
STATIC_URL = '/static/' 

# The directory where static files will be collected
STATIC_ROOT = "/usr/share/nginx/html/static/"

#Django's ManifestStaticFilesStorage appends a unique hash to the filenames of static files during the collectstatic process
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

STATICFILES_DIRS = [
    ("core", BASE_DIR / "project_config/static/core"),  # Core static files → /static/core/
    ("scheduler", BASE_DIR / "apps/scheduler/static/scheduler"),  # Scheduler static → /static/scheduler/
    ("frontend", BASE_DIR / "frontend/build"),  # React frontend static → /static/frontend/
]

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Aiming to allow apps access
CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Replace with your frontend's URL
    "http://192.168.49.2:30007", # What of "http://192.168.49.2:32212"
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = [
    "GET",
    "POST",
    "PUT",
    "PATCH",
    "DELETE",
    "OPTIONS",
]

CORS_ALLOW_HEADERS = [
    "content-type",
    "authorization",
    "x-custom-header",
]

SECURE_SSL_REDIRECT = False  # Disable HTTPS redirection for development

# Reads React's asset-manifest.json to dynamically get the latest hashed filenames
# Ensures Django loads the correct CSS and JS files even after new builds
def get_manifest_file():
    manifest_path = os.path.join(BASE_DIR, "frontend/build/asset-manifest.json")
    if os.path.exists(manifest_path):
        with open(manifest_path) as f:
            return json.load(f)
    return {}

REACT_MANIFEST = get_manifest_file()

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # Optionally, you can also include SessionAuthentication if needed:
        # 'rest_framework.authentication.SessionAuthentication',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    # Other settings as needed...
}